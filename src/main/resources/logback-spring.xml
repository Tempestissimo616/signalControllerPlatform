<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志的根目录   建议写绝对路径   如果不写默认在项目运行的根路径( D盘,C盘这种)-->
    <property name="LOG_PATH" value="D:/log" />
    <!-- 定义日志文件名称 -->
    <property name="LOG_FILE" value="signal-control-backend"></property>
    <property name="log-pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [%-5level] %c{1.}@%M:%L - %m%n"/>
    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        日志输出格式：
			%d表示日期时间，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。
			%msg：日志消息，
			%n是换行符
			%d{yyyy-MM-dd HH:mm:ss.SSS}

            %d 是日期时间占位 yyyy-MM-dd HH:mm:ss.SSS，表示年月日、小时、分钟、秒以及毫秒。
            [%X{traceId}]
            %X{...} 是 MDC（Mapped Diagnostic Context）占位符，用于插入线程本地的诊断信息。这里的 {traceId} 表示从 MDC 中获取名为 traceId 的值，通常用于分布式追踪。
            [%t]
            %t 是线程名占位符，用于显示生成日志的线程名称。
            [-5level]
            %level 是日志级别占位符，%-5 表示左对齐并占据至少 5 个字符的空间，不足则用空格填充。
            %c{1.}@%M:%L
            %c{1.} 是类名占位符，表示输出完整的类名，但通常会使用 {1} 来限制输出的深度，这里表示输出类的简单名称。
            %M 是方法名占位符，用于显示生成日志的方法名。
            %L 是行号占位符，用于显示生成日志的源代码行号。
            - %m%n
            %m 是消息占位符，用于显示日志消息本身。
            %n 是行分隔符占位符，用于在不同日志条目之间插入换行符。
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [%-5level] %c{1}@%M:%L - %m%n</pattern>
            <!--            <springProfile name="dev">-->
            <!--                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} == 学习笔记 == [%thread] -&ndash;&gt; %-5level %logger{50} - %msg%n</pattern>-->
            <!--            </springProfile>-->
            <!--            <springProfile name="prod">-->
            <!--                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}  ==学习笔记==[%thread] %-5level %logger{50} - %msg%n</pattern>-->
            <!--            </springProfile>-->

            <!--            如果将这个文件的名字改成logback-spring.xml   就可以使用上面的功能，
                            上面的功能是说可以根据不同的生产环境做不同的日志打印
            -->
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_PATH}/${LOG_FILE}.log</file>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>30</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
<!--        <encoder>-->
<!--            <pattern>${log-pattern}</pattern>-->
<!--            <charset>utf8</charset>-->
<!--        </encoder>-->
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [%-5level] %c{1}@%M:%L - %m%n</pattern>
        </layout>
    </appender>

    <!--
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false：表示只用当前logger的appender-ref，true：
		表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
<!--    &lt;!&ndash; hibernate logger &ndash;&gt;-->
<!--    <logger name="com.example.demolog" level="debug" ></logger>-->
<!--    &lt;!&ndash; Spring framework logger &ndash;&gt;-->
<!--    <logger name="org.springframework" level="debug" additivity="false"></logger>-->
    <logger name="com.phoenix.signal.controller.platform" level="INFO"/>





    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <root level="info">
        <appender-ref ref="stdout" />
        <appender-ref ref="appLogAppender" />
    </root>
</configuration>
